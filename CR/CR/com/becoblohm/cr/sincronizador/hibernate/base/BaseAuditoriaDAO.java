/*
 * $$Id: BaseAuditoriaDAO.java,v 1.2 2005/03/10 15:51:14 programa8 Exp $$
 * ===========================================================================
 * Material Propiedad SuperFerretería EPA C.A. 
 *
 * Creado por	: Superferretería EPA / Hibernate Synchronizer
 * Creado en 	: Wed Mar 02 14:08:23 GMT-04:00 2005
 * (C) Copyright SuperFerretería EPA C.A. Todos los Derechos Reservados
 * 
 * ---------------------------------------------------------------------------
 * Actualizaciones:
 * ---------------------------------------------------------------------------
 * $$Log: BaseAuditoriaDAO.java,v $
 * $Revision 1.2  2005/03/10 15:51:14  programa8
 * $CR al 10/03/2005. Merging desde branch STABLE
 * $
 * $Revision 1.1.4.3  2005/03/07 13:55:31  programa8
 * $Integración Versiones Estable e Inestable al 07/03/2005
 * $
 * $Revision 1.1.6.3  2005/03/02 18:59:38  programa8
 * $Cambio en tabla Auditoria - idauditoria promovido a BIGINT
 * $
 * $Revision 1.1.4.2  2005/03/02 18:23:12  programa8
 * $Cambio en tabla Auditoria - idauditoria promovido a BIGINT
 * $$
 * ===========================================================================
 */

package com.becoblohm.cr.sincronizador.hibernate.base;






import net.sf.hibernate.Hibernate;
import net.sf.hibernate.Session;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.becoblohm.cr.sincronizador.hibernate.dao.AuditoriaDAO;

/**
 * This is an automatically generated DAO class which should not be edited.
 *
 * @author Hibernate Synchronizer - $$Author: programa8 $$
 * @version $$Revision: 1.2 $$<br>$$Date: 2005/03/10 15:51:14 $$
 * @since Wed Mar 02 14:08:23 GMT-04:00 2005
 */
/**
 * This class has been automatically generated by Hibernate Synchronizer.
 * For more information or documentation, visit The Hibernate Synchronizer page
 * at http://www.binamics.com/hibernatesync or contact Joe Hudson at joe@binamics.com.
 */
public abstract class BaseAuditoriaDAO extends com.becoblohm.cr.sincronizador.hibernate.dao._RootDAO {
	/** Log para este objeto. */
	private static Log log = LogFactory.getLog(BaseAuditoriaDAO.class);


	/** 
	 * singleton instance of the DAO 
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	 */
	public static AuditoriaDAO instance;

	/**
	 * Return a singleton of the DAO
	 * @return AuditoriaDAO instance
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	 */
	public static AuditoriaDAO getInstance () {
		if (null == instance) instance = new AuditoriaDAO();
		if (log.isDebugEnabled()) {
			log.debug("Returning a sigleton instance of: AuditoriaDAO");
		}
		return instance;
	}

	/**
	 * com.becoblohm.cr.sincronizador.hibernate.dao._RootDAO _RootDAO.getReferenceClass()
	 * @return Class the com.becoblohm.cr.sincronizador.hibernate.dao._RootDAO
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	 */
	/*
	* En esta función se realizaron modificaciones referentes a la migración a java 1.6 por jperez
	* Sólo se parametrizó la clase
	* Fecha: agosto 2011
	*/
	public Class<com.becoblohm.cr.sincronizador.hibernate.Auditoria> getReferenceClass () {
		return com.becoblohm.cr.sincronizador.hibernate.Auditoria.class;
	}
	


	/**
      * Get an com.becoblohm.cr.sincronizador.hibernate.Auditoria instance 
	  * @param key the key or id of the object
 	  * @return com.becoblohm.cr.sincronizador.hibernate.Auditoria
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	  */
	public com.becoblohm.cr.sincronizador.hibernate.Auditoria get(com.becoblohm.cr.sincronizador.hibernate.AuditoriaPK key)
		throws net.sf.hibernate.HibernateException {
		return (com.becoblohm.cr.sincronizador.hibernate.Auditoria) get(getReferenceClass(), key);
	}

	/**
      * Get an com.becoblohm.cr.sincronizador.hibernate.Auditoria instance 
	  * @param key the key or id of the object
	  * @param s the session tu use
 	  * @return com.becoblohm.cr.sincronizador.hibernate.Auditoria
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	  */
	public com.becoblohm.cr.sincronizador.hibernate.Auditoria get(com.becoblohm.cr.sincronizador.hibernate.AuditoriaPK key, Session s)
		throws net.sf.hibernate.HibernateException {
		return (com.becoblohm.cr.sincronizador.hibernate.Auditoria) get(getReferenceClass(), key, s);
	}

	/**
      * Get and initialize an com.becoblohm.cr.sincronizador.hibernate.Auditoria instance 
	  * @param key the key or id of the object
	  * @param s the session tu use
 	  * @return com.becoblohm.cr.sincronizador.hibernate.Auditoria
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	  */
	public com.becoblohm.cr.sincronizador.hibernate.Auditoria getInitialize(com.becoblohm.cr.sincronizador.hibernate.AuditoriaPK key, Session s) 
			throws net.sf.hibernate.HibernateException { 
		com.becoblohm.cr.sincronizador.hibernate.Auditoria obj = get(key, s); 
		if (!Hibernate.isInitialized(obj)) {
			Hibernate.initialize(obj);
		} 
		return obj; 
	}
	
	/**
      * Load an com.becoblohm.cr.sincronizador.hibernate.Auditoria instance 
	  * @param key the key or id of the object
 	  * @return com.becoblohm.cr.sincronizador.hibernate.Auditoria
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	  */
	public com.becoblohm.cr.sincronizador.hibernate.Auditoria load(com.becoblohm.cr.sincronizador.hibernate.AuditoriaPK key)
		throws net.sf.hibernate.HibernateException {
		return (com.becoblohm.cr.sincronizador.hibernate.Auditoria) load(getReferenceClass(), key);
	}

	/**
      * Load an com.becoblohm.cr.sincronizador.hibernate.Auditoria instance 
	  * @param key the key or id of the object
	  * @param s the session tu use
 	  * @return com.becoblohm.cr.sincronizador.hibernate.Auditoria
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	  */
	public com.becoblohm.cr.sincronizador.hibernate.Auditoria load(com.becoblohm.cr.sincronizador.hibernate.AuditoriaPK key, Session s)
		throws net.sf.hibernate.HibernateException {
		return (com.becoblohm.cr.sincronizador.hibernate.Auditoria) load(getReferenceClass(), key, s);
	}

	/**
      * Load and initialize an com.becoblohm.cr.sincronizador.hibernate.Auditoria instance 
	  * @param key the key or id of the object
	  * @param s the session tu use
 	  * @return com.becoblohm.cr.sincronizador.hibernate.Auditoria
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	  */
	public com.becoblohm.cr.sincronizador.hibernate.Auditoria loadInitialize(com.becoblohm.cr.sincronizador.hibernate.AuditoriaPK key, Session s) 
			throws net.sf.hibernate.HibernateException { 
		com.becoblohm.cr.sincronizador.hibernate.Auditoria obj = load(key, s); 
		if (!Hibernate.isInitialized(obj)) {
			Hibernate.initialize(obj);
		} 
		return obj; 
	}

	/**
	 * Persist the given transient instance, first assigning a generated identifier. (Or using the current value
	 * of the identifier property if the assigned generator is used.) 
	 * @param auditoria a transient instance of a persistent class 
	 * @return the class identifier
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	 */
	public com.becoblohm.cr.sincronizador.hibernate.AuditoriaPK save(com.becoblohm.cr.sincronizador.hibernate.Auditoria auditoria)
		throws net.sf.hibernate.HibernateException {
		return (com.becoblohm.cr.sincronizador.hibernate.AuditoriaPK) super.save(auditoria);
	}

	/**
	 * Persist the given transient instance, first assigning a generated identifier. (Or using the current value
	 * of the identifier property if the assigned generator is used.) 
	 * Use the Session given.
	 * @param auditoria a transient instance of a persistent class
	 * @param s the Session
	 * @return com.becoblohm.cr.sincronizador.hibernate.AuditoriaPK the class identifier
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	 */
	public com.becoblohm.cr.sincronizador.hibernate.AuditoriaPK save(com.becoblohm.cr.sincronizador.hibernate.Auditoria auditoria, Session s)
		throws net.sf.hibernate.HibernateException {
		return (com.becoblohm.cr.sincronizador.hibernate.AuditoriaPK) super.save(auditoria, s);
	}

	/**
	 * Either save() or update() the given instance, depending upon the value of its identifier property. By default
	 * the instance is always saved. This behaviour may be adjusted by specifying an unsaved-value attribute of the
	 * identifier property mapping. 
	 * @param auditoria a transient instance containing new or updated state 
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	 */
	public void saveOrUpdate(com.becoblohm.cr.sincronizador.hibernate.Auditoria auditoria)
		throws net.sf.hibernate.HibernateException {
		super.saveOrUpdate(auditoria);
	}

	/**
	 * Either save() or update() the given instance, depending upon the value of its identifier property. By default the
	 * instance is always saved. This behaviour may be adjusted by specifying an unsaved-value attribute of the identifier
	 * property mapping. 
	 * Use the Session given.
	 * @param auditoria a transient instance containing new or updated state.
	 * @param s the Session.
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	 */
	public void saveOrUpdate(com.becoblohm.cr.sincronizador.hibernate.Auditoria auditoria, Session s)
		throws net.sf.hibernate.HibernateException {
		super.saveOrUpdate(auditoria, s);
	}

	/**
	 * Update the persistent state associated with the given identifier. An exception is thrown if there is a persistent
	 * instance with the same identifier in the current session.
	 * @param auditoria a transient instance containing updated state
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	 */
	public void update(com.becoblohm.cr.sincronizador.hibernate.Auditoria auditoria) 
		throws net.sf.hibernate.HibernateException {
		super.update(auditoria);
	}

	/**
	 * Update the persistent state associated with the given identifier. An exception is thrown if there is a persistent
	 * instance with the same identifier in the current session.
	 * Use the Session given.
	 * @param auditoria a transient instance containing updated state
	 * @param s the Session
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	 */
	public void update(com.becoblohm.cr.sincronizador.hibernate.Auditoria auditoria, Session s)
		throws net.sf.hibernate.HibernateException {
		super.update(auditoria, s);
	}

	/**
	 * Remove a persistent instance from the datastore. The argument may be an instance associated with the receiving
	 * Session or a transient instance with an identifier associated with existing persistent state. 
	 * @param id the instance ID to be removed
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	 */
	public void delete(com.becoblohm.cr.sincronizador.hibernate.AuditoriaPK id)
		throws net.sf.hibernate.HibernateException {
		super.delete(load(id));
	}

	/**
	 * Remove a persistent instance from the datastore. The argument may be an instance associated with the receiving
	 * Session or a transient instance with an identifier associated with existing persistent state. 
	 * Use the Session given.
	 * @param id the instance ID to be removed
	 * @param s the Session
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	 */
	public void delete(com.becoblohm.cr.sincronizador.hibernate.AuditoriaPK id, Session s)
		throws net.sf.hibernate.HibernateException {
		super.delete(load(id, s), s);
	}

	/**
	 * Remove a persistent instance from the datastore. The argument may be an instance associated with the receiving
	 * Session or a transient instance with an identifier associated with existing persistent state. 
	 * @param auditoria the instance to be removed
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	 */
	public void delete(com.becoblohm.cr.sincronizador.hibernate.Auditoria auditoria)
		throws net.sf.hibernate.HibernateException {
		super.delete(auditoria);
	}

	/**
	 * Remove a persistent instance from the datastore. The argument may be an instance associated with the receiving
	 * Session or a transient instance with an identifier associated with existing persistent state. 
	 * Use the Session given.
	 * @param auditoria the instance to be removed
	 * @param s the Session
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	 */
	public void delete(com.becoblohm.cr.sincronizador.hibernate.Auditoria auditoria, Session s)
		throws net.sf.hibernate.HibernateException {
		super.delete(auditoria, s);
	}
	
	/**
	 * Re-read the state of the given instance from the underlying database. It is inadvisable to use this to implement
	 * long-running sessions that span many business tasks. This method is, however, useful in certain special circumstances.
	 * For example 
	 * <ul> 
	 * <li>where a database trigger alters the object state upon insert or update</li>
	 * <li>after executing direct SQL (eg. a mass update) in the same session</li>
	 * <li>after inserting a Blob or Clob</li>
	 * </ul>
	 * @param auditoria the com.becoblohm.cr.sincronizador.hibernate.Auditoria to refresh
	 * @param s the Session to use
 	  * @throws net.sf.hibernate.HibernateException
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	 */
	public void refresh (com.becoblohm.cr.sincronizador.hibernate.Auditoria auditoria, Session s)
		throws net.sf.hibernate.HibernateException {
		super.refresh(auditoria, s);
	}

	/**
	 * Returns the default order property
	 * @return String the property name
	  * @since Wed Mar 02 14:08:23 GMT-04:00 2005
	 */
    public String getDefaultOrderProperty () {
		return null;
    }
    


}